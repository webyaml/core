# filename: conf/docs/reference/processors/googlesheet.cfg
# path: /docs/reference/processors/googlesheet

############################################################
##
## Reference  : Processors : GoogleSheets
##
############################################################

view_name: &view_name "Reference  : Processors : GoogleSheets"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/elements/html-datatables.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	**docs_navbar

templates:

	value_table: &value_table
		**datatable_js
		data: '{{json(values)}}'
		columns:
			- title: Name
			- title: Description										
			- title: Required
			- title: Defualt Value
		other: |
			searching: false,
			paging: false,
		#ordering: false,

View: &view
	content:
		-
			**div
			content:
				-
					**h3
					class: page-header
					value: *view_name
				-
					**p
					value: |
						The GoogleSheets library contains processors for reading and writing data from a GoogleSheet.
				-
					**p
					value: |
						The libray requires the following python packages to be installed: 
						
				-
					**pre
					value: |
						pip install --upgrade google-api-python-client
				-
					**spacer
					height: 20						
				-
					**h4
					class: page-header
					value: lib.processors.mysql.Insert
				-
					**h4
					value: Description
				-
					**p
					value: |
						The Insert processor creates new records in a MySQL or MariaDB database.  The cache_id attribute is used to cache the id of the newly created record.
				-
					**h4
					value: Usage
				-
					**pre
					value: "{{html_escape(code)}}"
					code: |
						# short syntax
						\**mysqlInsert
						conf:
							# Database connection settings
							host: localhost
							user: mydbuser
							db: mydbname
							passwd: "secret"
						sql: "INSERT INTO ...."
						
				-
					**h4
					value: Attributes					

				-
					**value_table
					id: insert
					values:
						- 
							- conf
							- Dictionary containg host, user, db, and passwd
							- Required
							- ""
						- 
							- sql
							- SQL Statement
							- Required
							- ""				
						- 
							- cache_id
							- Cache variable to store the ID of the new record.
							- ""
							- ""		
							
				-
					**h4
					class: page-header
					value: lib.processors.mysql.Select
				-
					**h4
					value: Description
				-
					**p
					value: |
						The Select processor retrieves data from a MySQL or MariaDB database.  The result of query is stored as an object that can later be displayed as content.
					
				-
					**h4
					value: Usage
				-
					**pre
					value: "{{html_escape(code)}}"
					code: |
						# short syntax
						\**mysqlSelect
						conf:
							# Database connection settings
							host: localhost
							user: mydbuser
							db: mydbname
							passwd: "secret"
						sql: "SELECT ...."
						reader: dict
						result:
							store: myQuery
						
				-
					**h4
					value: Attributes					

				-
					**value_table
					id: select
					values:
						- 
							- conf
							- Dictionary containg host, user, db, and passwd
							- Required
							- ""
						- 
							- sql
							- SQL Statement
							- Required
							- ""				
						- 
							- reader
							- "Reader to use to return result: dict,list"
							- "Required"
							- "dict"
						- 
							- result
							- Data Attributes
							- Required
							- ""								
				-
					**h4
					value: Data Attributes

				-
					**value_table
					id: dataAttributes
					values:							
						- 
							- entry
							- Marker
							- location in value to load or store
							- ""
							- ""
						- 
							- store
							- String
							- If provided, loaded data will be stored in this location
							- "Required"
							- ""					
				-
					**h4
					class: page-header
					value: lib.processors.mysql.Update
				-
					**h5
					value: Description
				-
					**p
					value: |
						The Update processor modifies data in a MySQL or MariaDB database.
				-
					**h5
					value: Usage
				-
					**pre
					value: "{{html_escape(code)}}"
					code: |
						# short syntax
						\**mysqlInsert
						conf:
							# Database connection settings
							host: localhost
							user: mydbuser
							db: mydbname
							passwd: "secret"
						sql: "INSERT INTO ...."
						
				-
					**h5
					value: Attributes					

				-
					**value_table
					id: update
					values:
						- 
							- conf
							- Dictionary containg host, user, db, and passwd
							- Required
							- ""
						- 
							- sql
							- SQL Statement
							- Required
							- ""
				
				-
					**h4
					value: Examples
					class: page-header
				-
					**p
					value: |
						It is recommended to create a configuration file before using these processors.  The examples below will use the following configuration file.
					
				-
					**pre
					value: "{{html_escape(code)}}"
					code: |
						# filename: conf/settings/mydb.cfg
						
						db_conf: &db_conf
							host: localhost
							user: dbuser
							db: dbuser
							passwd: "secret"

						insert: &insert
							\**mysqInsert
							conf:
								**db_conf
								
								
						update: &update
							\**mysqlUpdate
							conf:
								**db_conf		

						select: &select
							\**mysqlSelect
							conf:
								**db_conf
				-
					**p
					value: |
						Here is an example how to insert data and retrieve the id of the new row.
						
				-
					**pre
					value: "{{html_escape(code)}}"
					code: |
						\include conf/settings/mydb.cfg

						preprocess:
							\**insert
							sql: |
								INSERT into mytable
								(
									mycol,
									mycol1,
									mycol2
								)
									VALUES
								(
									"value",
									"value1",
									"value2"
								)
							cache_id: newid
						value: "Inserted 1 new record with the ID of '\{\{cache:newid\}\}'."
				-
					**p
					value: |
						Here is an example how to update a row.
				-
					**pre
					value: "{{html_escape(code)}}"
					code: |
						\include conf/settings/mydb.cfg

						preprocess:
							\**update
							sql: |
								UPDATE mytable
								SET
									mycol = "value"
								WHERE id = \{\{get:id\}\}
							# The id to update is given on the query string
							# http://domain/path/?id=$id
								
								
						value: "Record '\{\{get:id\}\}' has been updated."
						
				-
					**p
					value: |
						Here are some examples of how to retrieve results using a select query.
						
				-
					**p
					value: |
						Query the database and store the result as a list of dictionaries containing key-value pairs.
						
				-
					**pre
					value: "{{html_escape(code)}}"
					code: |
						\include conf/settings/mydb.cfg

						preprocess:
							\**select
							sql: |
								SELECT 
									id, 
									mycol,
									mycol1,
									mycol2
								FROM mytable
								WHERE 1
							reader: dict #default
							result:
								store: myrecords
								
								
						value: "\{\{myrecords\}\}" 
						#  [
						#	{'id': 1, 'mycol': 'value', 'mycol1': 'value1', 'mycol2': 'value2',},
						#	{'id': 2, 'mycol': 'value', 'mycol1': 'value1', 'mycol2': 'value2',},
						#	{'id': 3, 'mycol': 'value', 'mycol1': 'value1', 'mycol2': 'value2',},
						#	...
						# ]						
				-
					**p
					value: |
						Limit a database query to a single record and store the record as a dictionary containing key-value pairs.						
				-
					**pre
					value: "{{html_escape(code)}}"
					code: |
						\include conf/settings/mydb.cfg

						preprocess:
							\**select
							sql: |
								SELECT 
									id, 
									mycol,
									mycol1,
									mycol2
								FROM mytable
								WHERE 1
								LIMIT 1
							reader: dict #default
							result:
								name: myrecord
								entry: \{\{0\}\}
								
						value: "{{'\{\{myrecord\}\}'.html_escape()}}" 
						#  {'id': 1, 'mycol': 'value', 'mycol1': 'value1', 'mycol2': 'value2',}
						
				-
					**p
					value: |
						Query the database and store the result as a list of lists containing values.
						
				-
					**pre
					value: "{{html_escape(code)}}"
					code: |
						\include conf/settings/mydb.cfg

						preprocess:
							\**select
							sql: |
								SELECT 
									id, 
									mycol,
									mycol1,
									mycol2
								FROM mytable
								WHERE 1
							format: list
							name: myrecords
								
								
						value: "\{\{myrecords\}\}" 
						#  [
						#	[1, 'value', 'value1', 'value2',],
						#	[2, 'value', 'value1', 'value2',],
						#	[3, 'value', 'value1', 'value2',],
						#	...
						# ]						
						

						
					
include conf/docs/template.cfg