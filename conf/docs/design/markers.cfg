# filename: conf/docs/configs/marker.cfg
# path: /docs/configs/marker

############################################################
##
## Design  : Markers
##
############################################################

view_name: &view_name "Design  : Markers"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/elements/html-datatables.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	<<: *docs_navbar

View: &view
	content:
		-
			<<: *div
			content:
				-
					<<: *h3
					class: page-header
					value: 'Design  : Markers'
				-
					<<: *p
					value: |
						Markers are placeholders in {{"content".keyword()}} block attributes that are transformed by WebYAML into dynamic content.  Markers are used to dynamically add values to content from attributes and data objects.  Markers also support a wide array of functions that can additionally "markup" attributes and content.
				-
					<<: *p
					value: |
						All markers begin with two open braces ({{) and end with two closing braces (}}).  Within the braces a marker can contain an attribute, a pointer to data, and possibly one or more functions.  Below are some example of how to use markers in {{"content".keyword()}} blocks.
				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Displaing Attributes With Markers			
				-
					<<: *p
					value: |
						The most basic use of a marker is to display an attribute.  In the example below a custom attribute "myattribute" is defined.  If WebYAML finds a marker for this attribute, it will replace the marker with the value of the attribute.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-1"
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									myattribute: "World"
									value: "Hello {{myattribute}}!"
						-
							name: HTML
							id: "html-1"
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									Hello World!
						-
							name: Preview
							id: "preview-1"
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16							
									-
										myattribute: "World"
										value: "Hello {{myattribute}}!"
				-
					<<: *p
					value: |
						In the example above {{"\{\{myattribute\}\}".html_escape()}} is replaced by the value of the attribute {{"myattribute".keyword()}}.  Markers are not limited to the {{"value".keyword()}} attribute.  They can be used within any attribute that contains text.  It is very typical to use custom attributes in conjunction with the {{"wrap".keyword()}} attribute.  Here is an example.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-2"
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									attributes: ''
									class: ''
									id: ''
									style: ''
									value: 'Heading1'
									wrap: |
										<h1 id="\{\{id\}\}" class="\{\{class\}\}" style="\{\{style\}\}" \{\{attributes\}\}>|</h1>
						-
							name: HTML
							id: "html-2"
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									<h1 id="" class="" style="" >|</h1>
						-
							name: Preview
							id: "preview-2"
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16							
									-
										attributes: ''
										class: ''
										id: ''
										style: ''
										value: 'Heading1'
										wrap: <h1 id="{{id}}" class="{{class}}" style="{{style}}" {{attributes}}>|</h1>
				-
					<<: *p
					value: |
						The example above does not seem to have much practical value.  However, when used with {{"content".keyword()}} block templates, custom attributes are a powerful tool for building and customizing applications.  For more information please see the next section "Design : Templates".
				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Displaying Data With Markers			
				-
					<<: *p
					value: |
						WebYAML provides access to many data objects through markers.  These are some of the markers available and thier descriptions.
				-
					<<: *datatable_js
					id: markers
					values:
						- ["Parent",'{{html_escape("\{\{parent:$attribute\}\}")}}', "Parent Attribute"]
						- ["Top",'{{html_escape("\{\{top:$attribute\}\}")}}', "Top Attribute"]
						- ["Cache",'{{html_escape("\{\{cache:$var\}\}")}}', "Cached Variables: path, rurl, or custom"]
						- ["Session",'{{html_escape("\{\{session:$var\}\}")}}', "Session Varible (users)"]
						- ["GET",'{{html_escape("\{\{get:$var\}\}")}}', "HTTP GET"]
						- ["POST",'{{html_escape("\{\{post:$var\}\}")}}', "HTTP POST"]
						- ["GET/POST",'{{html_escape("\{\{getpost:$var\}\}")}}', "HTTP GET or POST"]
						- ["Raw",'{{html_escape("\{\{raw\}\}")}}', "HTTP request BODY"]
						- ["Data",'{{html_escape("\{\{data:$var\}\}")}}', "Element data"]
						- ["Custom",'{{html_escape("{\{$custom:$var\}\}")}}', "Preprocessor data"]
						- ["Path",'{{html_escape("{\{path:$arg\}\}")}}', "Path segments: arg0, arg1, etc."]
					columns:
						-
							title: Name
						-
							title: Usage
						-
							title: Description									
					other: |
						searching: false,
						paging: false,

				-
					<<: *p
					value: |
						Here is an example of how to display a GET variable.  The example below assumes the requested page was "/hello?name=Mark".
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-3"
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									value: "Hello \{\{get:name\}\}!"
						-
							name: HTML
							id: "html-3"
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									Hello Mark!
						-
							name: Preview
							id: "preview-3"
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16							
									-
										value: "Hello Mark!"

				-
					<<: *p
					value: |
						This example creates a link back to the refferer page. 
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-4"
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									value: Back
									wrap: '<a href="\{\{cache:rurl\}\}">|</a>'
						-
							name: HTML
							id: "html-4"
							content:
								<<: *pre
								content:
									value: '{{html_escape("<a href=\"")}}{{cache:rurl}}{{html_escape("\">Back</a>")}}'
									
						-
							name: Preview
							id: "preview-4"
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16							
									-
										value: Back
										wrap: '<a href="{{cache:rurl}}">|</a>'

				-
					<<: *spacer
					height: 20
				-
					<<: *h4
					value: Displaying Complex Data Objects

				-
					<<: *p
					value: |
						When using markers with complex data objects such as nested dictionaries and lists.
				-
					<<: *p
					value: |
						Here is a sample data object expressed as JSON:
				-
					<<: *pre
					value: "{{html_escape(code)}}"
					code: |
						{
							"key1": "value1",
							"key2": {
								"keyA": "valueA",
								"keyB": "valueB"
							"key3": [
								"item1",
								"item2"
							]
						}
					
				-
					<<: *p
					value: |
						For this example assume that the dictionary above is accessble through the marker {{html_escape("\{\{data:$var\}\}")}}.  Here are various ways by which the data can be accessed:
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-5"
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									value: |
										Key1: {{data:key1}}</br>
										Key2 - KeyA: {{data:key2:keyA}}</br>
										Key2 - KeyB: {{data:key2:keyB}}</br>
										Key3: {{data:key3}}</br>
										Key3[0]: {{data:key3:|0}}</br>
						-
							name: HTML
							id: "html-5"
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									Key1: value1</br>
									Key2 - KeyA: valueA</br>
									Key2 - KeyB: valueB</br>
									Key3: item1, item2</br>
									Key3[0]: item1</br>
						-
							name: Preview
							id: "preview-5"
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16							
									-
										value: |
											Key1: value1</br>
											Key2 - KeyA: valueA</br>
											Key2 - KeyB: valueB</br>
											Key3: item1, item2</br>
											Key3[0]: item1</br>
								
				-
					<<: *p
					class: alert alert-info
					value: |
						<strong>Note:</strong> Lists are returned as comma sperated values by default.  Sometimes it is necessary to access a specific item in a list.  This can be done with the syntax verticle bar follwed by an index (|x).  The Loop Element provides additional functionality for working with List type data.
				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Using Functions With Markers			
				-
					<<: *p
					value: |
						Functions provide additinal processing to data making it more useful in applications.  Here is a simple function to display the current date.
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-6"
							content:
								<<: *pre
								value: |
									value: {{html_escape("\{\{date()\}\}")}}
						-
							name: HTML
							id: "html-6"
							content:
								<<: *pre
								value: "{{date()}}"
						-
							name: Preview
							id: "preview-6"
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16							
									-
										value: "{{date()}}"
				-
					<<: *p
					value: |
						The date() function defaults to the current date.  However it also accepts a single argument which may be a data object containing a Python datetime object or a Unix timestamp.  Additional agruments may be passed to functions using function specific attributes.  Here are some examples:
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-7"
							content:
								<<: *pre
								value: |
									content:
										-
											format: "%c" #ISO
											value: '{{html_escape("\{\{date()\}\}</br>")}}'
										-
											format: "%B" # Month
											value: '{{html_escape("\{\{date(\"1490057121\")\}\}</br>")}}'
									
						-
							name: HTML
							id: "html-7"
							content:
								<<: *pre
								content:
									-
										format: "%c"
										value: |
											{{date()}}{{html_escape("</br>")}}
									-
										format: "%B"
										value: |
											{{date("1490057121")}}{{html_escape("</br>")}}
						-
							name: Preview
							id: "preview-7"
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16							
									-
										format: "%c" #ISO
										value: "{{date()}}</br>"
									-
										format: "%B" # Month
										value: '{{date("1490057121")}}</br>'
				-
					<<: *spacer
					height: 20										
				-
					<<: *p
					value: |
						Here is a list of available functions and their descriptions.
				-
					<<: *datatable_js
					id: functions
					values:
						- ["int()", "Convert string to interger"]
						- ["split()", "Split a string into a list"]
						- ["sha256()", "Encrypt a secret with sha-256"]
						- ["exists()", "Logical check of an attribute.  Returns: 'Ture' or 'False'"]
						- ["singleline()", "Remove line breaks"]
						- ["strip()", "Remove leading and trailing whitespace"]
						- ["escape()", "Escape single and double quotes"]
						- ["join()", "Convert a list into a delimited string"]
						- ["json()", "Convert a data object in to a JSON string"]
						- ["truncate()", "Truncate tuncate object.  length attribute defaults to 50"]
						- ["html_escape()", "Convert special charcters"]
						- ["uuid()", "Generate random UUID"]
						- ["url_quote()", "urllib.quote_plus()"]
						- ["url_unquote()", "urllib.unquote_plus()"]
						- ["date()", "Date and Time rendering"]
						- ["last4()", "Replace all charcters with '*' except the last 4"]
						
					data: '{{json(values)}}'
					columns:
						-
							title: Function
						-
							title: Description
					other: |
						searching: false,
						paging: false,						
						
				-
					<<: *spacer
					height: 20										

		-
			<<: *div
			width: 2
			offset: 2
			content:
				-
					<<: *p
					value: "< Previous</br>"
					class: "pull-right"
				-
					<<: *a
					url: "/docs/design/contentblocks"
					class: "pull-right"
					value: Content Blocks
		-
			<<: *div
			offset: 4
			width: 2
			content:
				-
					<<: *p
					value: "Next ></br>"
				-
					<<: *a
					url: "/docs/design/templates"
					class: 
					value: Templates
		-
			<<: *spacer
			height: 20						
					
include conf/docs/template.cfg