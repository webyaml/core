# filename: conf/docs/design/forms.cfg
# path: /docs/design/forms

############################################################
##
## Design  : Forms
##
############################################################

view_name: &view_name "Design  : Forms"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/elements/html-datatables.cfg
#include conf/docs/reference/processors/templates.cfg
include conf/elements/html-form.cfg


include conf/docs/navbar.cfg

navbar: &navbar
	<<: *docs_navbar

View: &view
	content:
		-
			<<: *div
			content:
				-
					<<: *h3
					class: page-header
					value: *view_name
				-
					<<: *p
					value: |
						WebYAML provides pre-built templates and libraries for creating forms for your applications.
				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Designing Forms			
				-
					<<: *p
					value: |
						The easiest way to design forms in WebYAML is to use the core library conf/elements/html-forms.cfg.  This library contains Content Block Templates for common form elements.  The example below uses the library to layout a simple login view.
				-
					<<: *pre
					value: '{{html_escape(code)}}'
					code: |
						# filename: conf/login.cfg
						\include conf/elements/html-form.cfg

						view: &view
							\**form
							name: login
							content: # fields
								-	
									\**h4
									value: Please Login
								-
									\**textbox
									label: Username
									name: username
									required:
								-
									\**password
									label: Password
									name: password
									required:
								-
									\**button
									name: login

						\include conf/template.cfg

				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Page Templates			
				-
					<<: *p
					value: |
						The html-form library is intended to be used with twitter bootstrap.   Your application pages should include Twitter Bootstrap's css and javascript files.  Here is an example Page Template to be used with the example above.
				-
					<<: *pre
					value: '{{html_escape(code)}}'
					code: |
						# filename: conf/tempalte.cfg
						\include conf/elements/html-basic.cfg

						content:
							\**html
							content:
								-
									\**head
									content:
										-
											\**responsive
										-
											\**css
											value: '/static/bower_components/bootstrap/dist/css/bootstrap.min.css'
										-
											\**js
											value: '/static/bower_components/bootstrap/dist/js/bootstrap.min.js'
								-
									\**body
									content:
										\**view

				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Form Data			
				-
					<<: *p
					value: '{{html_escape(code)}}'
					code: |
						By default field values are submitted as a HTTP POST data.  To access a value from a field use a marker with the syntax \{\{post:$name\}\} where $name is the name attribute of a form element.

				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Processing Forms			
				-
					<<: *p
					value: |
						Typically, when a form is submitted, the application will perform an action.  Use the process attribute to define a Processor Tree for performing actions after a submission.
				-
					<<: *p
					value: |
						Continuing the example above, we are going to add the postprocess attribute and create a series of processors.  These processors will query a database for a record that matches the username and a sha256 hash of the password submitted, store the matching database record in the users' session, and redirect the user to a dashboard page.					
				-
					<<: *pre
					value: '{{html_escape(code)}}'
					code: |
						# filename: conf/login.cfg
						\include conf/elements/html-form.cfg
						\include conf/mydb.cfg

						view: &view
							\**form
							name: login
							postprocess:
								# Query the database for a user
								\**select
								sql: |
									SELECT * 
									FROM user 
									WHERE username = "\{{post:username\}}"
									AND password = "\{{sha256(post:password)\}}"
									LIMIT 1;
								# store the query result as \{\{user\}\}
								result:
									store: user
									entry: '\{\{0\}\}'
								'true':
									# login successful.  Store \{{user\}} in the Session
									type: lib.processors.session.Cache
									cache:
										login: True
										user: '\{{user\}}'
									'true':
										# redirect to dashboard
										type: lib.processors.redirect.Redirect
										url: '/dashboard'
									
							content: # fields
								...

				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Validating Forms			
				-
					<<: *p
					value: |
						Sometimes it is important to validate forms and fields before processing.
				-
					<<: *p
					value: |
						The most commonly used validator is used to identify required fields.  To indicate that a form element is for a required field, add an required attribute.  This attribute does not need a value, but do not forget to place a colon following the attribute.
				-
					<<: *pre
					value: '{{html_escape(code)}}'
					code: |
						\**textbox
						label: Username
						name: username
						required:
				-
					<<: *p
					value: |
						More advanced validation will require adding web.py validators to your form elements with the  validator attribute.  Here are some example types and uses for validators.					

				-
					<<: *pre
					value: '{{html_escape(code)}}'
					code: |
						# password change form that requires a 
						# user to enter their new password twice

						\**form
						name: change_password
						validators: 
							- web.form.Validator("Passwords didn't match.", lambda i: i.password == i.password_again)
						content:
							-
								\**h4
								value: Enter a new password
							-
								\**password
								label: Password
								name: password
								required:
							-
								\**password
								label: Confirm Password
								name: password_again
								required:
							...
						
						
				-
					<<: *pre
					value: '{{html_escape(code)}}'
					code: |
						# field requires a properly formated email address
						
						\**textbox
						label: Email Address
						name: email
						required:
						validators:
							- web.form.regexp('(?i)^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$', 'This is not a valid email address.')


				-
					<<: *pre
					value: '{{html_escape(code)}}'
					code: |
						# field requires a number between 1 and 10
						
						\**textbox
						label: Score (1 - 10)
						name: score
						required:
						validators:
							- web.form.regexp('\d+', 'You did not enter a number')
							- web.form.Validator('You entered a number less than 1', lambda x:int(x)>=1))
							- web.form.Validator('You entered a number greater than 10', lambda x:int(x)<=10))

				-
					<<: *pre
					value: '{{html_escape(code)}}'
					code: |
						# alternate way to make a required field

						\**textbox
						label: My Required Field
						name: requireme
						validators:
							- web.form.notnull					
				-
					<<: *spacer
					height: 20				

				# Reference Chart
				#-
				#	<<: *processors_table
				#-
				#	<<: *spacer
				#	height: 20									
				-
					<<: *h4
					value: Form Elements			
				-
					<<: *p
					value: |
						Here are the basic form elements.

				-
					**div12
					content:
						-
							**div6
							content:
								**pre
								value: '{{html_escape(code)}}'
								code: |
									\**textbox
									name: textbox
									label: Textbox
									value: Textbox
									help: Optional helpful text
						-
							**div6
							content:
								**textbox
								name: textbox
								label: Textbox
								value: Textbox
								help: Optional helpful text
				-
					**rule
				-
					**div12
					content:
						-
							**div6
							content:
								**pre
								value: '{{html_escape(code)}}'
								code: |
									\**password
									name: password
									label: Password
									value: password
						-
							**div6
							content:
								**password
								name: password
								label: Password
								value: password
								
				-
					**rule
				-
					**div12
					content:
						-
							**div6
							content:
								**pre
								value: '{{html_escape(code)}}'
								code: |
									\**textarea
									name: textarea
									label: Textarea
									value: textarea
						-
							**div6
							content:
								**textarea
								name: textarea
								label: Textarea
								value: textarea
				-
					**rule
				-
					**div12
					content:
						-
							**div6
							content:
								**pre
								value: '{{html_escape(code)}}'
								code: |
									\**dropdown
									name: dropdown
									label: Dropdown
									values:
										- Option A
										- Option B
										- Option C
						-
							**div6
							content:
								**dropdown
								name: dropdown
								label: Dropdown
								values:
									- Option A
									- Option B
									- Option C							
				-
					**rule
				-
					**div12
					content:
						-
							**div6
							content:
								**pre
								value: '{{html_escape(code)}}'
								code: |
									\**radio
									name: radio
									label: Radio
									values:
										- Option A
										- Option B
										- Option C
									value: Option B 
						-
							**div6
							content:
								**radio
								name: radio
								label: Radio
								values:
									- Option A
									- Option B
									- Option C
								value: Option B 
				-
					**rule
				-
					**div12
					content:
						-
							**div6
							content:
								**pre
								value: '{{html_escape(code)}}'
								code: |
									\**checkbox
									label: checkbox
									name: Checkbox
									value: Option A
									text: Option A
						-
							**div6
							content:
								**checkbox
								label: checkbox
								name: Checkbox
								value: Option A
								text: Option A
								
				-
					**rule
				-
					**div12
					content:
						-
							**div6
							content:
								**pre
								value: '{{html_escape(code)}}'
								code: |
									\**file
									name: file
									label: File
						-
							**div6
							content:
								**file
								name: file
								label: File
								
				-
					**rule
				-
					**div12
					content:
						-
							**div6
							content:
								**pre
								value: '{{html_escape(code)}}'
								code: |
									\**button
									name: Button
						-
							**div6
							content:
								**button
								name: Button
		-
			<<: *div
			width: 2
			offset: 2
			content:
				-
					<<: *p
					value: "< Previous</br>"
					class: "pull-right"
				-
					<<: *a
					url: "/docs/design/processors"
					class: "pull-right"
					value: Processors
		-
			<<: *div
			offset: 4
			width: 2
			content:
				-
					<<: *p
					value: "Next ></br>"
				-
					<<: *a
					url: "/docs/design/fields"
					class: 
					value: Elements
		-
			<<: *spacer
			height: 20						
					
include conf/docs/template.cfg