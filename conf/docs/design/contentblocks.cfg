# filename: conf/docs/configs/marker.cfg
# path: /docs/configs/marker

############################################################
##
## Design  : Content Blocks
##
############################################################

view_name: &view_name "Design  : Content Blocks"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/elements/html-datatables.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	<<: *docs_navbar

View: &view
	content:
		-
			<<: *div
			content:
				-
					<<: *h3
					class: page-header
					value: 'Design  : Content Blocks'
				-
					<<: *p
					value: |
						A {{"content".keyword()}} block is the atomic unit of WebYAML. A {{"content".keyword()}} block is a set of instructions in YAML syntax for producing {{"content".keyword()}} for your application.  All applications are made from groups of {{"content".keyword()}} blocks.  Here are some examples.
				-
					<<: *spacer
					height: 20						
				-
					<<: *h4
					value: Single Content Block
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml-1"
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									value: "Hello World"
									wrap: "<h4>|</h4>"
						-
							name: HTML
							id: "html-1"
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									<h4>Hello World</h4>
						-
							name: Preview
							id: "preview-1"
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16							
									-
										value: "Hello World"
										wrap: "<h4>|</h4>"
									
				-
					<<: *p
					value: |
						The example above is a single {{"content".keyword()}} block containing two attributes, {{"value".keyword()}} and {{"wrap".keyword()}}.  Attributes contain information used by WebYAML to generate views for applicatons and APIs.  The attribute {{"value".keyword()}} may be a literal value or undefined at this time.
				-
					<<: *p
					value: |						
						The {{"wrap".keyword()}} attribute is used to perform additional processing by WebYAML called wrapping.  Wrapping is the process of surrounding the attribute {{"value".keyword()}} with additional text.  This additional text is defined in the attribute {{"wrap".keyword()}} and must be in the form "before|after" where the verticle bar (|) separates the wrap into two parts.  To understand how wrapping works, study the YAML and HTML tabs above.
				-
					<<: *p
					class: alert alert-info
					value: |
						<strong>Note:</strong> WebYAML makes heavy use of YAML syntax.  As a result most of the examples found in this documentation will also use YAML syntax.  YAML is designed to be human readable and is similar to other serialized data such as JSON or Python data objects.  If you are not familiar with YAML, there are plenty of good references available.  Here is a good place to start: <a					 href="https://learnxinyminutes.com/docs/yaml/">https://learnxinyminutes.com/docs/yaml/</a>					
				-
					<<: *spacer
					height: 20
				-
					<<: *h4
					value: A Content Tree
				-
					<<: *p
					value: |
						The following example creates three {{"content".keyword()}} blocks and introduces the {{"content".keyword()}} attribute.  The {{"content".keyword()}} attribute is used to nest blocks within other blocks.  The result is a {{"content".keyword()}} tree:
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml2"
							length: 10
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									# Top content block
									wrap: "<div>|</div>"
									content:
										-
											# Sub content block
											value: "Hello World"
											wrap: "<h4>|</h4>"
										-
											# Sub content block
											value: |
												Here is some multi-line text....
												....End of text
											wrap: "<p>|</p>"
						-
							name: HTML
							id: "html2"
							length: 10
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									<div>
										<h4>Hello World</h4>
										<p>Here is some multi-line text....
										....End of text</p>
									</div>
						-
							name: Preview
							id: "preview2"
							length: 10
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16
									-
										# Top content block
										wrap: "<div>|</div>"
										content:
											-
												# Sub content block
												value: "Hello World"
												wrap: "<h4>|</h4>"
											-
												# Sub content block
												value: |
													Here is some multi-line text....
													....End of text
												wrap: "<p>|</p>"					
						
				-
					<<: *p
					value: |
						The {{"content".keyword()}} tree begins with the "Top" {{"content".keyword()}} block containing the attributes {{"content".keyword()}} and {{"wrap".keyword()}}.  The value of the {{"content".keyword()}} attribute is a list containing "Sub" {{"content".keyword()}} blocks. 
				-
					<<: *p
					value: |						
						A {{"content".keyword()}} tree is read from root ("top") to branches ("sub"), but processed and rendered from branch to root.  This allows sub content to be wrapped by its parent content.   Again please study the YAML and HTML tabs above to understand how the wraps are applied.
				-
					<<: *p
					value: |
						This example introduces three new YAML syntaxes to {{"content".keyword()}} blocks.  The first new syntax is a comment.  Comments start with a "hash tag" (#) and continue till the end of a line.  The second syntax is a list which is notated by indentation and hyphens (-).  The third syntax is multi-line text.  This is notated by a verticle bar (|) followed by an indented block of text.  These are all standard YAML syntaxes.  For a more detailed explination please see the YAML tutorial linked above.
				-
					<<: *p
					class: alert alert-info
					value: |
						<strong>Note:</strong> YAML syntax uses spaces for indentation.  However, you may use tabs if you prefer.  Tabs will be converted to spaces when the configurations are loaded.
				-
					<<: *spacer
					height: 20
				-
					<<: *h4
					value: Element	Types
				-
					<<: *p
					value: |			
						The next example uses the {{"type".keyword()}} attribute.  By default all content blocks are of the {{"type".keyword()}} {{"classes.element.Element".keyword()}}.  This class is the base Element class which can be extended by a developer to provide additional functionality.
				-
					<<: *p
					value: |
						The example below uses the class {{"lib.elements.tabs.Tab".keyword()}} which is a special class for generating Twitter Bootstrap navigation tabs, such as, the ones used in this documentation. 
				-
					type: lib.elements.tabs.Tabs
					content:
						-
							name: YAML
							id: "yaml3"
							length: 10
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									type: lib.elements.tabs.Tabs
									content:
										-
											name: "Tab One"
											id: "tab_1"
											value: Here is some text.
										-
											name: "Tab Two"
											id: "tab_2"
											value: Here is some different text.
						-
							name: HTML
							id: "html3"
							length: 10
							content:
								<<: *pre
								value: '{{html_escape(code)}}'
								code: |
									<ul class="nav nav-tabs">
										<li class="">
											<a href="#tab_1" data-toggle="tab" aria-expanded="true">Tab One</a>
										</li>
										<li class="active">
											<a href="#tab_2" data-toggle="tab" aria-expanded="true">Tab Two</a>
										</li>
									</ul>
									<div class="tab-content">
										<div class="tab-pane fade" id="tab_1">
											Here is some text.
										</div>  
										<div class="tab-pane fade active in" id="tab_2">
											Here is some different text.
										</div>
									</div>
						-
							name: Preview
							id: "preview3"
							length: 10
							class: row
							content:
								<<: *panel_noheader
								content:
									-
										<<: *spacer
										height: 16
									-
										type: lib.elements.tabs.Tabs
										content:
											-
												name: "Tab One"
												id: "tab_1"
												value: Here is some text.
											-
												name: "Tab Two"
												id: "tab_2"
												value: Here is some different text.
				-
					<<: *p
					value: |
						In addition to the attribute {{"type".keyword()}} this example uses two new attributes, {{"name".keyword()}} and {{"id".keyword()}}.  These custom attributes are used by the Tabs class to name the tabs in the display and map content for each tab.			
				-
					<<: *spacer
					height: 20
				-
					<<: *h4
					value: Default Attributes					
				-
					<<: *p
					value: |
						Content blocks can have many different attributes, which can be defined in classes or directly in content blocks.  The reference chart below lists attributes that are define in the base classes and therefore can be used within any {{"content".keyword()}} block:
				-
					<<: *datatable_js
					id: markers
					values:
						- ["acl","Access Control List logical expression", "", ""]
						- ["content","Define nested Content blocks", "", ""]
						- ["log","Append value to log file", "", ""]
						- ["noindent","Override indentation", "", ""]
						- ["preprocess","Pre-processor objects", "", ""]
						- ["rstrip","Function - rstrip()", "", ""]
						- ["strip","Function - strip()", "", ""]
						- ["type","Element type", "Required", "classes.element.Element"]
						- ["value","Content value or Output", "Required", "EMPTY STRING"]
						- ["wrap","Wrapper template in the form 'part|part'", "Required", "|"]
						
					data: '{{json(values)}}'
					columns:
						-
							title: Name
						-
							title: Description										
						-
							title: Required
						-
							title:	Defualt Value
					other: |
						searching: false,
						paging: false,

		-
			<<: *spacer
			height: 20
		-
			<<: *div
			width: 2
			offset: 2
			content:
				-
					<<: *p
					#value: "< Previous</br>"
					#class: "pull-right"
				-
					<<: *a
					#url: "/docs/design/views"
					#class: "pull-right"
					#value: URLS/Views
		-
			<<: *div
			offset: 4
			width: 2
			content:
				-
					<<: *p
					value: "Next ></br>"
				-
					<<: *a
					url: "/docs/design/markers"
					class: 
					value: Markers
		-
			<<: *spacer
			height: 20
										
										
include conf/docs/template.cfg