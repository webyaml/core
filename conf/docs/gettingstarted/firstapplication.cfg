# filename: conf/docs/home.cfg
# path: /docs/home

############################################################
##
## Getting Started : First Application
##
############################################################

view_name: &view_name "Getting Started: First Application"

include conf/elements/html-basic.cfg
#include conf/elements/html-bootstrap-panel.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	<<: *docs_navbar

View: &view
	content:
		-
			<<: *div
			content:
				-
					<<: *h3
					class: page-header
					value: "Getting Started : First Application"
				-
					<<: *p
					value: |						
						Start building your application by copying the {{"sites/blank".keyword()}}
						directory to make a new directory for your application.  This example creates a new 
						folder for the application 'hello'.
				-
					<<: *pre
					value: |
						$ cd /path-to-framework/sites/
						$ cp -rfp blank hello
				-
					<<: *p
					value: |
						An application requires a minimum of two configuration files, 
						{{"conf/urls.cfg".keyword()}} and at least one {{"content".keyword()}}
						configuration.  These configuration files, and all other files used by your application 
						should be stored in the application directory.
				-
					<<: *h4
					value: conf/urls.cfg	
				-
					<<: *p
					value: |
						The URL configuration is stored in the file {{"conf/urls.cfg".keyword()}}.  This file 
						defines the available {{"URLs/views".keyword()}} for an application.
				-
					<<: *p
					value: |
						Using a text editor, create the file {{"conf/urls.cfg".keyword()}} with the following 
						content:
				-
					<<: *pre
					value: |
						# filename: conf/urls.cfg
						# hello world urls
						
						-
							/:
								conf: conf/hello.cfg
				-
					<<: *p
					class: alert alert-info
					value: |
						<strong>Note:</strong> YAML syntax uses spaces for indentation.  However, you 
						may use tabs if you prefer.  Tabs will be converted to spaces when the 
						configurations are loaded.
				-
					<<: *h4
					value: Content Configuration	
				-
					<<: *p
					value: |
						In the URL configuration file above we declared that the {{"content".keyword()}} 
						configuration file {{"conf/hello.cfg".keyword()}} should be used to produce views for 
						the URL "/".  Create a new text document containing the following 
						{{"content".keyword()}} block:
				-
					<<: *pre
					value: |
						# filename: conf/hello.cfg
						# hello world content

						value: Hello World!
				-
					<<: *h4
					value: Testing the Application						
				-
					<<: *p
					value: |
						Start the application 'hello' with the following commands:
				-
					<<: *pre
					value: |
						$ cd /path-to-framework/sites/hello/
						$ ./app.py
				-
					<<: *p
					value: |
						After the server is started, open a web browser and visit the page 
						"http://localhost:8080/". You should now see "Hello World!" displayed in the window.
		-
			<<: *spacer
			height: 20
		-
			<<: *div
			width: 2
			offset: 2
			content:
				-
					<<: *p
					value: "< Previous</br>"
					class: "pull-right"
				-
					<<: *a
					url: "/docs/gettingstarted/filestructure"
					class: "pull-right"
					value: File Structure
		-
			<<: *div
			offset: 4
			width: 2
			content:
				-
					<<: *p
					value: "Next ></br>"

				-
					<<: *a
					url: "/docs/gettingstarted/applicationserver"
					class: 
					value: Application Server
		-
			<<: *spacer
			height: 20				

include conf/docs/template.cfg