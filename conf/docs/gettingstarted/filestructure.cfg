# filename: conf/docs/home.cfg
# path: /docs/home

############################################################
##
## Getting Started : File Structure
##
############################################################

view_name: &view_name "Getting Started: File Structure"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	<<: *docs_navbar

View: &view
	content:
		-
			<<: *div
			content:
				-
					<<: *h3
					class: page-header
					value: "Getting Started : File Structure"
				-
					<<: *p
					value: |
						Let's take a look at what is included with WebYAML and how it is organized.  
						The main directory of the package includes two directories {{keyword("core")}}
						and {{keyword("sites")}}.  
				-
					<<: *p
					value: |						
						The {{keyword("core")}} directory contains the abstraction layer.  Here is the 
						structure of the {{keyword("core")}} directory:
				-
					<<: *pre
					value: |			
						core:
							classes:
								__init__.py
								content.py
								element.py
								processor.py
								url.py
							conf:
								(configuration files and templates)
							lib:
								(pre-built clasess to extend core functionality)
							__init__.py
							app.py

				-
					<<: *p
					value: |
						The {{keyword("sites")}} directory is where you should place your configurations 
						and any code.  The package is distributed with a blank site which should be copied 
						and used as a starting point for your application.  This site includes symbolic links 
						(shortcuts) to the {{keyword("core")}} directory.  Here is the default structure:
				-
					<<: *pre
					value: |						
						sites:
							blank:
								cache:
									(optional cache storage)
								core -> ../../core
								conf:
									(configuration files and templates)
								lib:
									(pre-built clasess to extend core functionality)
								sessions:
									(session data)
								static:
									(images, stylesheets, scripts, etc.)
								__init__.py
								app.py -> core/app.py

		-
			<<: *spacer
			height: 20
		-
			<<: *div
			width: 2
			offset: 2
			content:
				-
					<<: *p
					value: "< Previous</br>"
					class: "pull-right"
				-
					<<: *a
					url: "/docs/gettingstarted/introduction"
					class: "pull-right"
					value: Introduction
		-
			<<: *div
			offset: 4
			width: 2
			content:
				-
					<<: *p
					value: "Next ></br>"
				-
					<<: *a
					url: "/docs/gettingstarted/firstapplication"
					class: 
					value: First Application
		-
			<<: *spacer
			height: 20						


include conf/docs/template.cfg