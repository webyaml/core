# filename: conf/docs/home.cfg
# path: /docs/home

############################################################
##
## Getting Started : Application Server
##
############################################################

view_name: &view_name "Getting Started: Application Server"

include conf/elements/html-basic.cfg
include conf/elements/html-bootstrap-panel.cfg

include conf/docs/navbar.cfg

navbar: &navbar
	<<: *docs_navbar

View: &view
	content:
		-
			<<: *div
			content:
				-
					<<: *h3
					class: page-header
					value: "Getting Started : Application Server"

				-
					<<: *p
					value: |
						Applications and APIs can be be hosted using the CherryPY websever or Apache 
						with mod_wsgi.
				-
					<<: *h4
					value: CherryPY Web Server
				-
					<<: *p
					value: |
						CherryPY is useful for development and for hosting applications in constrained 
						environments such as embedded (IoT) devices.  WebYAML has been proven 
						to work on systems with 64MB of RAM. However, at least 128MB of RAM is 
						recommended.
				-
					<<: *p
					value: |
						To launch your application using the CherryPy server you will use a terminal or ssh 
						connection to the server.  Start the server on port 8080 with the following 
						commands where {mysite} is the application you want to serve:
				-
					<<: *pre
					value: |
						$ cd /path-to-framework/sites/{mysite}/
						$ ./app.py
				-
					<<: *p
					value: |				
						After a few seconds the following line should appear in your terminal:
				-
					<<: *pre
					value: |
						http://0.0.0.0:8080/
				-
					<<: *p
					value: |
						Any output from the application will appear in the terminal below that line.  To 
						stop the server press "ctrl+c" on your keyboard.
				-
					<<: *p
					value: |
						If you would like to serve the application on a different port, provide the port 
						number as an argument to the app.py script. Note: root access is required to 
						use a port below 1024.
				-
					<<: *pre
					value: |
						# /path-to-framework/sites/{mysite}/app.py 80
				-
					<<: *p
					value: |
						If you want to run the server in the background you can do something like this:
				-
					<<: *pre
					value: |
						# /path-to-framework/sites/{mysite}/app.py 80 >> /var/log/{mysite}.log 2>&1 &
				-
					<<: *h4
					value: Apache with mod_WSGI						
				-
					<<: *p
					value: |
						When deploying myframewok in larger environments it is recommended to use a 
						high performance webserver such as Apache with mod_wsgi.  Here are a few 
						advantages of using WSGI to host your applications:
				-
					<<: *ul
					content:
						-
							<<: *li
							value: One server can host multiple applications							
						-
							<<: *li
							value: The number of threads can be controlled
						-
							<<: *li
							value: Change the user that runs the application
						-
							<<: *li
							value: Run applications on standard ports (80,443)
				-
					<<: *p
					value: |
						For the purposes of this introduction we will assume that the server is running on 
						a local server using the CherryPY webserver.  If you are interested in deploying 
						Apache with mod_WSGI please see this documentation.						
					
					
		-
			<<: *spacer
			height: 20
		-
			<<: *div
			width: 2
			offset: 2
			content:
				-
					<<: *p
					value: "< Previous</br>"
					class: "pull-right"
				-
					<<: *a
					url: "/docs/gettingstarted/firstapplication"
					class: 
					value: First Application

		-
			<<: *spacer
			height: 20					

include conf/docs/template.cfg