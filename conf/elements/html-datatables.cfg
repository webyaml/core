# filename: conf/elelemts/html-datatable.cfg

############################################################
##
##	This library includes elements that use Datatables Plugin
##	For more information see: https://datatables.net/
##
############################################################

#include conf/elements/html-table.cfg

html.datatables:
	-
		html.DataTable.Ajax: &datatable_ajax
			id: 'default_table'
			table_class: table table-striped table-bordered table-hover dataTable no-footer
			col_class: text-tbody
			other: ''
			ajax_other: ''
			scrollX: 'true'
			stateSave: 'true'
			empty: No matching records found
			value: |
				<div class="" style="padding-bottom: 20px;">
					<table class="{{table_class}}" id="{{id}}" width="100%" style="width: 100%;">
					</table>
				</div>
				<script>
				    $(document).ready(function() {
					var table = $('#{{id}}').DataTable( {
					    {{other}}
					    ajax: {
						{{ajax_other}}
						url: '{{url}}',
						dataSrc: ''
					    },
					    responsive: true,
					    "scrollX": {{scrollX}},
					    stateSave: {{stateSave}},
					    'oLanguage': {
						'sEmptyTable': "{{empty}}"
					    },
					    columns: {{json(columns)}}
					} );
					table.on('init', function() {
						table.row().every( function() {
							for (var i = 0; i < table.settings()[0]['aoColumns'].length; i++) { 
								var fn = table.settings()[0]['aoColumns'][i]['fn'];
								var args = table.settings()[0]['aoColumns'][i]['args'];
								if (fn && (typeof fn === "string")) {
									if(args) {
										eval(fn+"(this.data(),args)");
									} else {
										eval(fn+"(this.data())");
									}
									this.invalidate();
								}
								if (fn && (fn instanceof Array)) {
									for (var j = 0; j < fn.length; j++) {
									
										if(args) {
											eval(fn[j]+"(this.data(),args)");
										} else {
											eval(fn[j]+"(this.data())");
										}
										this.invalidate();
									}
								}
							}
						});
						table.draw();
					});
				    });
				</script>
				

	-
		html.DataTable.JSONP: &datatable_jsonp
			**datatable_ajax
			ajaxother: |
				"dataType": "jsonp",
	-
		html.DataTable.Js: &datatable_js
			id: 'default_table'
			table_class: table table-striped table-bordered table-hover dataTable no-footer
			col_class: text-tbody
			other: ''
			scrollX: 'true'
			stateSave: 'true'
			empty: No matching records found
			value: |
				<div class="" style="padding-bottom: 20px;">
					<table class="{{table_class}}" id="{{id}}" width="100%" style="width: 100%;">
					</table>
				</div>
				<script>
				    $(document).ready(function() {
				    
					var data = {{values}}
					
					if (data === "[]") {
						data = []
					}					
					
					{{script}}
				    
					var table = $('#{{id}}').DataTable( {
					    {{other}}
					    "data": data,
					    "responsive": true,
					    "scrollX": {{scrollX}},
					    "stateSave": {{stateSave}},
					    "oLanguage": {
						"sEmptyTable": "{{empty}}"
					    },
					    columns: {{json(columns)}}		    
					} );
					
					table.row().every( function() {
						for (var i = 0; i < table.settings()[0]['aoColumns'].length; i++) { 
						
							var fn = table.settings()[0]['aoColumns'][i]['fn'];
							var args = table.settings()[0]['aoColumns'][i]['args'];
							if (fn && (typeof fn === "string")) {
							
								if(args) {
									eval(fn+"(this.data(),args)");
								} else {
									eval(fn+"(this.data())");
								}
								this.invalidate();
							}
							if (fn && (fn instanceof Array)) {
							
								for (var j = 0; j < fn.length; j++) {
								
									if(args) {
										eval(fn[j]+"(this.data(),args)");
									} else {
										eval(fn[j]+"(this.data())");
									}
									this.invalidate();
								}
							}
						}
					});
					table.draw();

				    });
				</script>	


	-
		html.DataTable.Js4: &datatable_js_bs4
			id: 'default_table'
			table_class: table table-striped table-bordered table-hover dataTable no-footer
			col_class: text-tbody
			other: ''
			scrollX: 'true'
			stateSave: 'true'
			empty: No matching records found
			value: |
				<div class="" style="padding-bottom: 20px;">
					<table class="{{table_class}}" id="{{id}}" width="100%" style="width: 100%;">
					</table>
				</div>
				<script>
				    $(document).ready(function() {
				    
					var data = {{values}}
					
					if (data === "[]") {
						data = []
					}
					
					{{script}}
				    
					var table = $('#{{id}}').DataTable( {
					    {{other}}
					    "data": data,
					    "responsive": true,
					    "scrollX": {{scrollX}},
					    "stateSave": {{stateSave}},
					    "oLanguage": {
						"sEmptyTable": "{{empty}}"
					    },
					    columns: {{json(columns)}}		    
					} );
					
					
					table.rows().every( function() {
						for (var i = 0; i < table.settings()[0]['aoColumns'].length; i++) { 
						
							var fn = table.settings()[0]['aoColumns'][i]['fn'];
							var args = table.settings()[0]['aoColumns'][i]['args'];
							if (fn && (typeof fn === "string")) {
							
								if(args) {
									eval(fn+"(this.data(),args)");
								} else {
									eval(fn+"(this.data())");
								}
								this.invalidate();
							}
							if (fn && (fn instanceof Array)) {
							
								for (var j = 0; j < fn.length; j++) {
								
									if(args) {
										eval(fn[j]+"(this.data(),args)");
									} else {
										eval(fn[j]+"(this.data())");
									}
									this.invalidate();
								}
							}
						}
					});
					table.draw();
					

				    });
				</script>	

	-
		html.DataTable.Js: &datatable_js_dict
			id: 'default_table'
			table_class: table table-striped table-bordered table-hover dataTable no-footer
			col_class: text-tbody
			other: ''
			scrollX: 'true'
			stateSave: 'true'
			empty: No matching records found
			value: |
				<div class="" style="padding-bottom: 20px;">
					<table class="{{table_class}}" id="{{id}}" width="100%" style="width: 100%;">
					</table>
				</div>
				<script>
				    $(document).ready(function() {
					var table = $('#{{id}}').DataTable( {
					    {{other}}
					    data: {{values}},
					    responsive: true,
					    "scrollX": {{scrollX}},
					    stateSave: {{stateSave}},
					    'oLanguage': {
						'sEmptyTable': "{{empty}}"
					    },
					    columns: {{json(columns)}}		    
					} );
					
					table.row().every( function() {
						for (var i = 0; i < table.settings()[0]['aoColumns'].length; i++) { 
							var fn = table.settings()[0]['aoColumns'][i]['fn'];
							var args = table.settings()[0]['aoColumns'][i]['args'];
							if (fn && (typeof fn === "string")) {
								if(args) {
									eval(fn+"(this.data(),args)");
								} else {
									eval(fn+"(this.data())");
								}
								this.invalidate();
							}
							if (fn && (fn instanceof Array)) {
								for (var j = 0; j < fn.length; j++) {
								
									if(args) {
										eval(fn[j]+"(this.data(),args)");
									} else {
										eval(fn[j]+"(this.data())");
									}
									this.invalidate();
								}
							}
						}
					});
					table.draw();
				    });
				</script>	

